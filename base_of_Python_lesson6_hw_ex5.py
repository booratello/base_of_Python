"""
Реализовать класс Stationery (канцелярская принадлежность). Определить в нем атрибут title (название) и метод
draw (отрисовка). Метод выводит сообщение “Запуск отрисовки.” Создать три дочерних класса Pen (ручка),
Pencil (карандаш), Handle (маркер). В каждом из классов реализовать переопределение метода draw. Для каждого из классов
методы должен выводить уникальное сообщение. Создать экземпляры классов и проверить, что выведет описанный метод для
каждого экземпляра.
"""
# Вопрос - а зачем нам нужен атрибут title, кроме как просто его определить?
# Посмотреть, что он для всех классов одинковый, т.к. не переопределялся?


class Stationery:
    title = "Этот атрибут одиаковый для родительского и всех дочерних классов."

    def draw(self):
        print("Запуск отрисовки.")


# Как я понял, такое форматирование текста будет работать в Unix-системах и в Windows 10.
# Устанавливать сторонние модули не стал.
class Pen(Stationery):
    def draw(self):
        print("\033[3m\033[34m\033[40mСейчас мы пишем ручкой.\033[0m")


class Pencil(Stationery):
    def draw(self):
        print("\033[1m\033[37m\033[40mЭту фразу написали карандашом (видимо, мягким).\033[0m")


class Handle(Stationery):
    def draw(self):
        print("\033[44mЭтот текст выделен маркером.\033[0m")


# Экземпляр some_obj переопределяется для каждого класса. Не совсем то, что подразумевалось в задаче (хотя и не
# противоречит ей), но такая запись короче, а необходимые действия выполняютя.

for class_name in [Stationery, Pen, Pencil, Handle]:
    some_obj = class_name()
    print(some_obj.title)
    some_obj.draw()
