def task1():
    inside_list = [75, "Парагвай", 12.54, 18.46, True, list("Парселтанг"), complex(2, 12), None]
    print("Проверим тип данных элементов следующего списка:\n", inside_list, ".\n")
    for el in inside_list:
        print("У элемента", el, "тип данных ", type(el), ".\n")


def task2():
    # Пустой список для дальнейшего заполнения.
    user_list = list()
    # Пользователь заполняет список пока не напишет "stop" (да, строку "stop" нельзя добавить к элементам списка).
    el = input("Введите первый элемент вашего списка.\n")
    while el == "stop":
        el = input("Вы угадали стоп-слово (несложно, правда?).\n"
                   "Ну, с пустым списком я ничего не сделаю, попробуйте что-то другое.\n")
    while el != "stop":
        user_list.append(el)
        el = input("Введите следующий элемент списка или напишите \"stop\" для завершения заполнения списка.\n")
    print("Получен следующий список:\n", user_list, ".\n")
    """
    Обработка списка пользователя. На вход цикла for подаются чётные идексы эелементов списка пользователя
    (чётность реализована за счёт начала отсчёта от индекса 0 с шагом 2, т.е. через одного). Элементы с
    данными индексами удаляются из списка пользователя, присваиваются переменной el и с её помощью
    вносятся в список пользователя на позицию, раную своему изначальному индексу, увеличенному на 1.
    Т.е. чётные индексы перемещаются на нечётные позиции. Если список пользователя состоит из нечётного
    количества элементов, последний элемент не попадает в эту сотртровку и остаётся на своей изначальной позиции.
    """
    for index_number in range(0, len(user_list), 2):
        el = user_list.pop(index_number)
        index_number += 1
        user_list.insert(index_number, el)
    print("Отформатированный список:\n", user_list, ".\n")


def task3():
    season_dict = {1: "Зима", 2: "Зима", 3: "Весна", 4: "Весна", 5: "Весна", 6: "Лето", 7: "Лето", 8: "Лето",
                   9: "Осень", 10: "Осень", 11: "Осень", 12: "Зима"}
    user_month = input("Введите номер месяца.\n")
    # Проверка на правильность ввода целого числа от 1 до 12.
    while not user_month.isdigit() or int(user_month) == 0 or int(user_month) > 12:
        user_month = input("Обращаю внимание. Введите НОМЕР месяца - целое число от 1 до 12.\n")
    print("Выбраный Вами месяц соответствует следующему времени года:\n", season_dict.get(int(user_month)), "\n")


def task4():
    user_str = input("Ведите строку из нескольких слов, разделённых пробелами.\n")
    while user_str == "":
        user_str = input("Вы забыли ввести данные.\n")
    # На случай пользователя-экспериментатора удаляем возможные пробелы в начале и в конце введённой строки.
    # Добавляем в конце один нужный пробел для корректного выполнения цикл while (да, костылик).
    user_str = "".join([user_str.strip(), " "])
    number = 1
    while user_str.find(" ") != -1:
        # Находим вхождение первого пробела
        index_space = user_str.find(" ")
        # Выносим в отдельное слово символы с начала строки и до пробела, не включая его.
        word = user_str[0:index_space]
        # В начале добавляем номер слова, само слово ограничиваем 10 символами.
        word = ". ".join([str(number), word[:10]])
        print(word)
        # Остаток строки присваиваем изначальной строке и удаляем пробелы в начале (можно было обойтись указанием в
        # срезе index_space + 1, но так заодно удаляются лишние возможно введённые пробелы.
        user_str = user_str[index_space:].lstrip()
        number += 1
    print("\n")


def task5():
    inside_list = [105, 88, 75, 57, 44, 44, 32, 18, 9, 9, 7, 6, 5, 3, 3, 3, 2]
    print("Рейтинг:", inside_list, ".\n")
    user_number = input("Введите число для внесения его в рейтинг.\n")
    # Проверка на правильность ввода натурального числа, изменяем его тип на int для дальнейшей обработки
    while not user_number.isdigit() or int(user_number) == 0:
        user_number = input("Обращаю внимание - нужно натуральное число, т.е. целое положительное (больше ноля). \n")
    user_number = int(user_number)
    """
    В цикле идёт сравнение элементов списка с числом пользователя. Пока последнее меньше или равно элементу,
    осуществляется следующая итерация цикла с наращиваием счётчика. Когда число пользователя становится больше элемента,
    оно вносится в список на место с индексом равным значению счётчика, выполнение цикла прерывается. Если число должно
    добавиться в конец списка, то этого не произойдёт, т.к. цикл к тому моменту закончит перебор значений списка.
    Поэтому реализовано доп.условие - сравнение счётчика с длиной списка. В случае их равенства, число пользователя
    вносится в конец списка, а выполнение цикла прерывается (иначе будет зацикливание, связаное с увеличением списка).
    """
    index_number = 0
    for i in inside_list:
        if user_number <= i:
            index_number += 1
            if index_number == len(inside_list):
                inside_list.append(user_number)
                break
            else:
                continue
        else:
            inside_list.insert(index_number, user_number)
            break
    print("Итоговый рейтинг:", inside_list, ".\n")


def task6():
    # Пустой список для дальнейшего заполнения.
    user_keys = list()
    print("Заполним структурированый список товаров.\n"
          "Для начала укажите уникальные характеристики, по которым сортировать товары.\n")
    # Пользователь заполняет список пока не напишет "stop" (вряд ли возможна такая характеристика).
    el = input("Введите первую характеристику товаров.\n")
    while el == "stop":
        el = input("Рано, нужна хотя бы одна характеристика.\n")
    while el != "stop":
        if user_keys.count(el) > 0:
            el = input("Характеристика должна быть уникальной, т.е. не повторяться.\n"
                       "Введите следующую характеристику товара или напишите \"stop\", если их достаточно.\n")
            continue
        user_keys.append(el)
        el = input("Введите следующую характеристику товара или напишите \"stop\", если их достаточно.\n")
    print("Получен следующий список характеристик товаров:\n", user_keys, ".\n")
    product_list = list()
    print("Введите характеристики первого товара.\n")
    user_answer = "Y"
    product_number = 1
    """
    Последовательно выводятся запросы о внесении значений для всех ранее введённых ключей.
    При каждом запросе образуется словарь-переменная из пары ключ-зачение, которая добавляется в итоговый словарь.
    Этот словарь со всеми ключами-значениями вносится в кортеж, в него так же вносится значение счётчика,
    соответствующее позиции товара. Данный кортеж добавляется к списку товаров. Процедура повторяется с увеличением
    счётчика, если нужны ещё товары.
    """
    while user_answer != "N":
        product_dict = dict()
        for i in range(0, len(user_keys)):
            value = input(f"Введите {user_keys[i]} для товара номер {product_number}.\n")
            key = user_keys[i]
            pair_for_dict = {key: value}
            product_dict.update(pair_for_dict)
        product_list.append(tuple([product_number, product_dict]))
        product_number += 1
        user_answer = input("Добавить ещё один товар (Y/N)?\n").upper()
        while user_answer != "Y" and user_answer != "N":
            user_answer = input("Ошибка в выборе ответа. Добавить ещё один товар (Y/N)?\n").upper()
    print("Получен следующий список товаров:\n")
    # Построчный вывод информации о товарах, запятые поле элементов в этом случае не выводятся
    for el in product_list:
        print(el)
    print("Соберём аналитику о товарах по характеристикам:\n")
    info_dict = dict()
    """
    Происходит поиск в словарях (которые в кортежак, которые в полученном списке) по первому (нулевому) ключу. Значения,
    соответствующие ключу, вносятся в новый список. Список становится значением в итоговом словаре, ключ тот же, что и 
    раньше. Процедура повотряется для всех ключей. Посторчный вывод пар ключ-значение для итогового словаря несколько
    сложнее, чем в предыдущем варианте, т.к. словарь не является последовательностью. Не стал разбираться с этим.
    """
    for i in range(0, len(user_keys)):
        value_list = list()
        for j in range(0, product_number - 1):
            value_list.append(product_list[j][1].get(user_keys[i]))
        key = user_keys[i]
        pair_for_dict = {key: value_list}
        info_dict.update(pair_for_dict)
    print(info_dict)


# Зацикливаем выбор задачи, чтобы не перезапускать программу для проверки каждой из них.
number_of_task = 0
while number_of_task < 7:
    number_of_task = input("Выберете задачу.\n\n"
                           "Задача [1].\nСоздать список и заполнить его элементами различных типов данных.\n"
                           "Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type()\n"
                           "для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно,\n"
                           "в программе.\n\n"
                           "Задача [2].\nДля списка реализовать обмен значений соседних элементов, т.е. значениями\n"
                           "обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д. При нечетном количестве элементов\n"
                           "последний сохранить на своем месте. Для заполнения списка элементов необходимо\n"
                           "использовать функцию input().\n\n"
                           "Задача [3].\nПользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому\n"
                           "времени года относится месяц (зима, весна, лето, осень).\n"
                           "Напишите решения через list и через dict.\n\n"
                           "Задача [4].\nПользователь вводит строку из нескольких слов, разделённых пробелами.\n"
                           "Вывести каждое слово с новой строки. Строки необходимо пронумеровать.\n"
                           "Если в слово длинное, выводить только первые 10 букв в слове.\n\n"
                           "Задача [5].\nРеализовать структуру «Рейтинг», представляющую собой не возрастающий набор\n"
                           "натуральных чисел. У пользователя необходимо запрашивать новый элемент рейтинга. Если в\n"
                           "рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же\n"
                           "значением должен разместиться после них.\n"
                           "Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2. Пользователь ввел число 3.\n"
                           "Результат: 7, 5, 3, 3, 3, 2. Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.\n"
                           "Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1. Набор натуральных чисел можно\n"
                           "задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].\n\n"
                           "Задача [6].\n*Реализовать структуру данных «Товары». Она должна представлять собой список\n"
                           "кортежей. Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два\n"
                           "элемента — номер товара и словарь с параметрами (характеристиками товара: название, цена,\n"
                           "количество, единица измерения). Структуру нужно сформировать программно, т.е. запрашивать\n"
                           "все данные у пользователя.\n"
                           "Пример готовой структуры:\n"
                           "[ (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),\n"
                           "(2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),\n"
                           "(3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”}) ]\n"
                           "Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый\n"
                           "ключ — характеристика товара, например название, а значение — список\n"
                           "значений-характеристик, например список названий товаров.\n"
                           "Пример: { “название”: [“компьютер”, “принтер”, “сканер”],\n"
                           "“цена”: [20000, 6000, 2000], “количество”: [5, 2, 7], “ед”: [“шт.”] }\n\n"
                           "Любое число больше 6 - выход.\n\n")
    while not number_of_task.isdigit() or int(number_of_task) == 0:
        number_of_task = input("Для выбора задачи введите число от 1 до 6, число больше 6 для выхода. \n")
    number_of_task = int(number_of_task)
    if number_of_task == 1:
        task1()
    elif number_of_task == 2:
        task2()
    elif number_of_task == 3:
        task3()
    elif number_of_task == 4:
        task4()
    elif number_of_task == 5:
        task5()
    elif number_of_task == 6:
        task6()
    else:
        print("Выход так выход.")
