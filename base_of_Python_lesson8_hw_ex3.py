"""
Создайте собственный класс-исключение, который должен проверять содержимое списка на отсутствие элементов типа строка
и булево. Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять
список. Класс-исключение должен контролировать типы данных элементов списка.
"""
from ast import literal_eval


class IDoNotNeedBoolAndStr(Exception):
    def __init__(self, txt):
        self.txt = txt


user_list = []

while True:
    user_answer = input("Введите данные для заполнения списка. В нём не должно быть строк или булевых значений. "
                        "Для завершения заполнеия списка введите \"стоп\".\n")
    if user_answer != "стоп":
        """
        Т.к. не являющаяся любого вида числом или булевым значением строка при отсутствии соответствующих скобок может 
        быть преобразована в список, словарь или множество (помимо того, что могла подразумеваться просто строка), 
        literal_eval выпадает в ошибку ValueError. Поэтому все возможные вариации на тему сводим к строке, на которую 
        срабатывает собственное исключение. По итогу программы строки допускаются только в качестве ключей в словарях, 
        булевы не допускаются только в "чистом" виде.
        """
        try:
            try:
                user_answer = literal_eval(user_answer)
                if type(user_answer) is bool:
                    raise IDoNotNeedBoolAndStr("Ну просили же - без булевых.")
                else:
                    user_list.append(user_answer)
                    continue
            except ValueError:
                raise IDoNotNeedBoolAndStr("Ну просили же - без строк.")
        except SyntaxError:
            print("Ошибка ввода. Попробуйте снова.")
            continue
        except IDoNotNeedBoolAndStr as e:
            print(e)
            continue
    else:
        break

print(f"Итоговый список:\n{user_list}")
