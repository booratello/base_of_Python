def is_it_number(*args):
    """
    Проверка, является ли введённая пользователем строка числом, за счёт переопределения её типа данных как float для
    дальнейшей работы с ней. В случае ошибки переопределения типа данных, у пользователя вновь запрашивается число.
    :param args: all types (almost), needs int or float
    :return: list[all args is float]
    """
    args_list = []

    for i in args:
        while True:
            try:
                args_list.append(float(i))
            except ValueError:
                i = input(f"Вместо {i} нужно целое или вещественное число.\n")
                continue
            except TypeError:
                i = input(f"Вместо {i} нужно целое или вещественное число.\n")
                continue
            break
    return args_list


def task1():
    """
    Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
    Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.
    :return: None
    """

    def division(dividend, divider):
        """
        Деление первого введённого числа на второе.
        :param dividend: all types -> is_it_number -> float
        :param divider: all types -> is_it_number -> float
        :return: try -> float or except -> str
        """
        dividend, divider = is_it_number(dividend, divider)
        try:
            return round(dividend / divider, 2)
        except ZeroDivisionError:
            return "Ошибка при делении на ноль. Вообще это можно делать - делить на ноль, нас со школы обманывали.\n" \
                   "Но для немыслящей абстрактно машины это несколько сложно."

    first_number = input("Введите первое число. Его мы будем делить.\n")
    second_number = input("Введите второе число. На него мы будем делить.\n")
    print(f"В результате мы получили следующее:\n{division(first_number, second_number)}\n")


def task2():
    """
    Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя: имя, фамилия, год рождения,
    город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы.
    Реализовать вывод данных о пользователе одной строкой.
    :return: None
    """

    def users_parameters(**kwargs):
        """
        Вывод данных о пользователе
        :param kwargs: dict
        :return: None
        """
        print(f"Ваши данные: {[i for i in kwargs.values()]}\n")

    print("Введите свои данные. Я просто программа и лишь выполняю свою работу.\n"
          "Если не хотите - соврите что-нибудь, это не допрос.")
    users_parameters(name_=input("Введите ваше имя.\n"), secondname=input("Введите вашу фамилию.\n"),
                     birth_year=input("Введите год вашего рождения.\n"),
                     city_of_residence=input("Введите назавние города, в котором вы проживаете.\n"),
                     email=input("Введите адрес вашей электронной почты.\n"),
                     phone_number=input("Введите номер вашего телефона.\n"))


def task3():
    """
    Реализовать функцию my_func(), которая принимает три позиционных аргумента,и возвращает сумму наибольших
    двух аргументов.
    :return: None
    """

    def my_func(f_arg, s_arg, t_arg):
        """
        Сумма двух наибольших аргументов.
        :param f_arg: all types -> is_it_number -> float
        :param s_arg: all types -> is_it_number -> float
        :param t_arg: all types -> is_it_number -> float
        :return: float
        """
        args_list = is_it_number(f_arg, s_arg, t_arg)
        return sum(args_list) - min(args_list)

    first = input("Введите первое число.\n")
    second = input("Введите второе число.\n")
    third = input("Введите третье число.\n")
    print(f"Сумма двух наибольших чисел равна {my_func(first, second, third)}.\n")


def task4():
    """
    Программа принимает действительное положительное число x и целое отрицательное число y. Необходимо выполнить
    возведение числа x в степень y. Задание необходимо реализовать в виде функции my_func(x, y). При решении задания
    необходимо обойтись без встроенной функции возведения числа в степень.
    :return: None
    """

    def my_func(x, y):
        """
        Возведение числа x в сепень y.
        :param x: all types -> is_it_number -> float
        :param y: all types -> int
        :return: float
        """
        while True:
            # Проверка на действительное положительное число. Т.к. is_it_number() возвращает список, для "изъятия"
            # значения х, присваиваем х значение нулевого (и единственного) элемента списка.
            x = is_it_number(x)[0]
            if x >= 0:
                break
            else:
                x = input(f"Вместо {x} нужно положительное число.\n")
                continue
        while True:
            # Проверка на целое отрицательное число. Прогон через int(is_it_number()) будет нечестен при введении
            # ползователем вещественного числа, поэтому для данного случая реализована собственная проверка.
            try:
                y = int(y)
            except ValueError:
                y = input(f"Вместо {y} нужно целое отрицательное число.\n")
                continue
            if y < 0:
                break
            else:
                y = input(f"Вместо {y} нужно целое отрицательное число.\n")
                continue
        return x ** y

    print("В результате возведения первого числа в степень второго получен следующий результат:\n",
          my_func(input("Введите действительное положительное число.\n"),
                  input("Введите целое отрицательное число.\n")), "\n")


def task5():
    """
    Программа запрашивает у пользователя строку чисел, разделенных пробелом. При нажатии Enter должна выводиться сумма
    чисел. Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter. Сумма вновь введенных
    чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа вводится специальный символ, выполнение
    программы завершается. Если специальный символ введен после нескольких чисел, то вначале нужно добавить сумму этих
    чисел к полученной ранее сумме и после этого завершить программу.
    :return: None
    """
    list_numbers = []
    """
    Перезапрос чисел у пользователя реализован через while True, выход из которого происходит при обнаружении во
    введённой строке символа q. Введённая строка переобразуется в список по разделителю "," его элементы поочерёдно
    проверяются и преопределяются функцией is_it_number() (проверка происходит до обнаружения символа q) и добавляются
    в новый список list_numbers. Пользователю выводится сумма его элементов.
    """
    while True:
        user_answer = input("Введите числа через запятую. Введите \"q\" для завершения ввода.\n").split(",")
        for i in user_answer:
            if i != "q":
                i = is_it_number(i)[0]
                list_numbers.append(i)
            else:
                break
        print(f"Сумма введённых чисел равна {sum(list_numbers)}.\n")
        if user_answer.count("q") > 0:
            break


def task6():
    """
    Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же, но с прописной
    первой буквой. Например, print(int_func(‘text’)) -> Text.
    Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом. Каждое слово
    состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое слово должно начинаться с
    заглавной буквы. Необходимо использовать написанную ранее функцию int_func().
    :return: None
    """

    def int_func(word):
        """
        Проверка введённого текста на то, что он состоит только из латинских букв в нижнем регистре и пробелов (в случае
        нескольких введённых слов). Каждое слово переписывается с заглавной буквы.
        :param word: str
        :return: str
        """
        while True:
            counter = 0
            for i in word:
                if "abcdefghijklmnopqrstuvwxyz ".count(i) == 0:
                    counter += 1
            if counter == 0:
                return word.title()
            else:
                word = input("Нужны слова из латинских букв в нижнем регистре. Введите заново.\n")

    print("Запишем каждое слово с заглавной буквы\n",
          int_func(input("Введите слова из латинских букв в нижнем регистре.\n")), "\n")


while True:
    print("Задача [1]. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.\n"
          "Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.\n\n"
          "Задача [2]. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя: имя,\n"
          "фамилия, год рождения, город проживания, email, телефон. Функция должна принимать параметры как\n"
          "именованные аргументы. Реализовать вывод данных о пользователе одной строкой.\n\n"
          "Задача [3]. Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает\n"
          "сумму наибольших двух аргументов.\n\n"
          "Задача [4]. Программа принимает действительное положительное число x и целое отрицательное число y.\n"
          "Необходимо выполнить возведение числа x в степень y. Задание необходимо реализовать в виде функции\n"
          "my_func(x, y).При решении задания необходимо обойтись без встроенной функции возведения числа в степень.\n\n"
          "Задача [5]. Программа запрашивает у пользователя строку чисел, разделенных пробелом. При нажатии Enter\n"
          "должна выводиться сумма чисел. Пользователь может продолжить ввод чисел, разделенных пробелом и снова\n"
          "нажать Enter. Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа\n"
          "вводится специальный символ, выполнение программы завершается. Если специальный символ введен после\n"
          "нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого\n"
          "завершить программу.\n\n"
          "Задача [6]. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую\n"
          "его же, но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.\n"
          "Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом.\n"
          "Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое слово\n"
          "должно начинаться с заглавной буквы. Необходимо использовать написанную ранее функцию int_func().\n")

    menu_dict = {"1": task1, "2": task2, "3": task3, "4": task4, "5": task5, "6": task6}
    try:
        menu_dict[input("Введите номер задачи. Для выхода нажмите любую клавишу, кроме 1-6.\n")]()
    except KeyError:
        break
