from random import randrange


def task1():
    """
    Создать программно файл в текстовом формате, записать в него построчно данные, вводимые пользователем.
    Об окончании ввода данных свидетельствует пустая строка.
    :return: None
    """
    with open("boP_les5_ex1.txt", "w") as txt_file:
        while True:
            user_str = input("Введите строку для записи её в файл.\n"
                             "Ничего не вводите и нажмите Enter прекращения записи в файл.\n")
            if user_str != "":
                txt_file.write("".join([user_str, "\n"]))
            else:
                break


def task2():
    """
    Создать текстовый файл (не программно), сохранить в нем несколько строк, выполнить подсчет количества строк,
    количества слов в каждой строке.
    :return: None
    """
    with open("boP_les5_ex2.txt", encoding='utf-8') as txt_file:
        list_lines = txt_file.readlines()
        print(f"В данном файле {len(list_lines)} строк.")
        """
        Можно было бы проще - поверить, что в файле все строки отформатированы без лишних отступов и пустых строк,
        подсчитать кол-во пробелов в строке и выдать его + 1 за количество слов. Но это не наш метод - так не интересно.
        Подсчёт слов c некоторыми изменениями подтянул из 4 задачи в дз ко 2 уроку. Программа не считает за слово
        перенос строки, математические символы и знаки препинания. Из минусов - подсчёт слов будет неверным при наличии
        в тексте арифметических выражении и/или при отсутствии пробелов до/после разделяющих слова знаков
        перпинания (например:так - посчитает за одно слово).
        """
        number = 1
        for line in list_lines:
            line = "".join([line.strip(), " "])
            counter_words = 0
            while line.find(" ") != -1:
                index_space = line.find(" ")
                word = line[0:index_space]
                if ".,?!-—;:+/*\n".count(word) > 0:
                    counter_words -= 1
                line = line[index_space:].lstrip()
                counter_words += 1
            print(f"Количество слов в строке №{number} равно {counter_words}.")
            number += 1


def task3():
    """
    Создать текстовый файл (не программно), построчно записать фамилии сотрудников и величину их окладов.
    Определить, кто из сотрудников имеет оклад менее 20 тыс., вывести фамилии этих сотрудников.
    Выполнить подсчет средней величины дохода сотрудников.
    :return: None
    """
    with open("boP_les5_ex3.txt", encoding='utf-8') as txt_file:
        list_lines = txt_file.readlines()
        sum_salary = 0
    for line in list_lines:
        index_space = line.find(" ")
        # В срезе от позиции пробела до конца строки убираем с обеих сторон пробельные символы,приравниваем его к float.
        # Ломается, если в файле вещественные числа записаны через запятую, а не через точку.
        salary = float(line.strip()[index_space:])
        sum_salary += salary
        if salary < 20000:
            print(line[:index_space])
    print(round(sum_salary / len(list_lines), 2), "\n")

# Где-то в последующих задачах наверняка применим JSON, но мои попытки его использовать ни к чему не привели.
# Пришлось идти наверняка не самыми простыми путями, работая срезами.


def task4():
    """
    Создать (не программно) текстовый файл со следующим содержимым:
    One — 1
    Two — 2
    Three — 3
    Four — 4
    Необходимо написать программу, открывающую файл на чтение и считывающую построчно данные.
    При этом английские числительные должны заменяться на русские.
    Новый блок строк должен записываться в новый текстовый файл.
    :return: None
    """
    rus_numbers = ["Один", "Два", "Три", "Четыре"]
    with open("boP_les5_ex4(rus).txt", "w") as output_file:
        with open("boP_les5_ex4(en).txt", encoding='utf-8') as input_file:
            for i in range(4):
                line_in = input_file.readline()
                # В прочтённой из файла строке ищем первый пробел и делаем срез от него до конца строки.
                # Объединяем соответствующую строку из списка с русскоязычными числительными с этой строкой-срезом.
                line_out = "".join([rus_numbers[i], line_in[line_in.find(" "):]])
                output_file.write(line_out)


def task5():
    """
    Создать (программно) текстовый файл, записать в него программно набор чисел, разделенных пробелами.
    Программа должна подсчитывать сумму чисел в файле и выводить ее на экран.
    :return: None
    """
    with open("boP_les5_ex5.txt", "w") as txt_file:
        # Создаём список из 25 рандомных чисел от 0 до 100, с помощью map и join (не хочет работать без предварительного
        # преобразования чисел в str) преобразуем в числа в строку с пробелом-разделителем, записываем её строку в файл.
        txt_file.write(" ".join(list(map(str, [randrange(101) for _ in range(25)]))))
    with open("boP_les5_ex5.txt", encoding='utf-8') as txt_file:
        # Обратно предыдущему выажению - читем строку из файла, преобразуем её в список строк по пробелу-разделителю,
        # строки в списке преобразуем в int, проводим суммирование полученного списка чисел, выводим сумму на экран.
        print(sum(list(map(int, txt_file.read().split(" ")))))


def task6():
    """
    Необходимо создать (не программно) текстовый файл, где каждая строка описывает учебный предмет и наличие лекционных,
    практических и лабораторных занятий по этому предмету и их количество. Важно, чтобы для каждого предмета не
    обязательно были все типы занятий. Сформировать словарь, содержащий название предмета и общее количество занятий по
    нему. Вывести словарь на экран.
    :return: None
    """
    discipline_dict = {}
    with open("boP_les5_ex6.txt", encoding='utf-8') as txt_file:
        for line in txt_file:
            # Будет работать, если после названия предмета есть двоеточие.
            key = line[:line.find(":")]
            value = sum([int(i) for i in line.split() if i.isdigit()])
            discipline_dict.update({key: value})
    print(discipline_dict)


def task7():
    """
    Создать (не программно) текстовый файл, в котором каждая строка должна содержать данные о фирме: название, форма
    собственности, выручка, издержки. Необходимо вычислить прибыль каждой компании и среднюю прибыль. Реализовать
    список, содержащий словарь (название фирмы и прибыль) и словарь с одним элементом (средняя прибыль). Добавить в
    первый словарь еще один элемент, содержащий результат вычисления отношения прибыли к убыткам. Итоговый список
    сохранить в файл.
    :return: None
    """
    company_dict = {}
    charge = []
    with open("boP_les5_ex7.txt", encoding='utf-8') as input_file:
        for line in input_file:
            # Название обычно в кавычках, по ним его и вычленяем из строки. А без них всё рухнет, да.
            key = line[line.find("\""):line.rfind("\"") + 1]
            # Ищем числа в строке. Работает в случае целых положительных чисел.
            value = [int(i) for i in line.split() if i.isdigit()]
            # Убытки вносим в отдельный список для для дальнейшего вычисления отношения прибыли к ним.
            # Проще было бы сейчас это число узнать и записать, но задание требует сделать это позже.
            charge.append(value[1])
            value = value[0] - value[1]
            company_dict.update({key: value})
    company_list = [company_dict, {"средняя прибыль": round((sum(company_dict.values()) / len(company_dict)), 2)}]
    counter = 0
    for key in company_list[0]:
        # value = company_list[0][key]
        # company_list[0][key] = [value, round(value/charge[counter], 2)]
        # Такой вариант с запросом словаря из списка по его позиции тоже работает, но PyCharm его не одобряет,
        # подчёркивая key в последнем выражении.
        # Изменения непоследственно в словаре отображаются и во вложенном в список словаре.
        company_dict[key] = [company_dict[key], round(company_dict[key] / charge[counter], 2)]
        counter += 1
    with open("boP_les5_ex7.txt", "a", encoding='utf-8') as output_file:
        output_file.write("".join(["\n", str(company_list)]))


while True:
    print("Задача [1]. Создать программно файл в текстовом формате, записать в него построчно данные, вводимые\n"
          "пользователем. Об окончании ввода данных свидетельствует пустая строка.\n\n"
          "Задача [2]. Создать текстовый файл (не программно), сохранить в нем несколько строк, выполнить подсчет\n"
          "количества строк, количества слов в каждой строке.\n\n"
          "Задача [3]. Создать текстовый файл (не программно), построчно записать фамилии сотрудников и величину их\n"
          "окладов. Определить, кто из сотрудников имеет оклад менее 20 тыс., вывести фамилии этих сотрудников.\n"
          "Выполнить подсчет средней величины дохода сотрудников.\n\n"
          "Задача [4]. Создать (не программно) текстовый файл со следующим содержимым:\n"
          "One — 1\n"
          "Two — 2\n"
          "Three — 3\n"
          "Four — 4\n"
          "Необходимо написать программу, открывающую файл на чтение и считывающую построчно данные.\n"
          "При этом английские числительные должны заменяться на русские. Новый блок строк должен записываться в\n"
          "новый текстовый файл.\n\n"
          "Задача [5]. Создать (программно) текстовый файл, записать в него программно набор чисел, разделенных\n"
          "пробелами. Программа должна подсчитывать сумму чисел в файле и выводить ее на экран.\n\n"
          "Задача [6]. Необходимо создать (не программно) текстовый файл, где каждая строка описывает учебный предмет\n"
          "и наличие лекционных, практических и лабораторных занятий по этому предмету и их количество. Важно, чтобы\n"
          "для каждого предмета не обязательно были все типы занятий. Сформировать словарь, содержащий название\n"
          "предмета и общее количество занятий по нему. Вывести словарь на экран.\n\n"
          "Задача [7]. Создать (не программно) текстовый файл, в котором каждая строка должна содержать данные о\n"
          "фирме: название, форма собственности, выручка, издержки. Необходимо вычислить прибыль каждой компании и\n"
          "cреднюю прибыль. Реализовать список, содержащий словарь (название фирмы и прибыль) и словарь с одним\n"
          "элементом (средняя прибыль). Добавить в первый словарь еще один элемент, содержащий результат вычисления\n"
          "отношения прибыли к убыткам. Итоговый список сохранить в файл.\n"
          "Подсказка: использовать менеджеры контекста.\n")

    menu_dict = {"1": task1, "2": task2, "3": task3, "4": task4, "5": task5, "6": task6, "7": task7}
    try:
        menu_dict[input("Введите номер задачи. Для выхода нажмите любую клавишу, кроме 1-7.\n")]()
    except KeyError:
        break
